print("192111205-M.NithinReddy")
import math

PLAYER_X = "X"
PLAYER_O = "O"
EMPTY = " "

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

def check_winner(board, player):
    
    for i in range(3):
        if all(board[i][j] == player for j in range(3)):
            return True
        if all(board[j][i] == player for j in range(3)):
            return True
    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):
        return True
    return False

def is_board_full(board):
    return all(board[i][j] != EMPTY for i in range(3) for j in range(3))

def evaluate(board):
    if check_winner(board, PLAYER_X):
        return 1
    elif check_winner(board, PLAYER_O):
        return -1
    else:
        return 0

def minimax(board, depth, is_maximizing):
    if check_winner(board, PLAYER_X):
        return 1
    elif check_winner(board, PLAYER_O):
        return -1
    elif is_board_full(board):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = PLAYER_X
                    score = minimax(board, depth + 1, False)
                    board[i][j] = EMPTY
                    best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = PLAYER_O
                    score = minimax(board, depth + 1, True)
                    board[i][j] = EMPTY
                    best_score = min(score, best_score)
        return best_score

def find_best_move(board):
    best_score = -math.inf
    best_move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY:
                board[i][j] = PLAYER_X
                score = minimax(board, 0, False)
                board[i][j] = EMPTY
                if score > best_score:
                    best_score = score
                    best_move = (i, j)
    return best_move

def main():
    board = [[EMPTY for _ in range(3)] for _ in range(3)]

    print("Welcome to Minimax Tic Tac Toe!")
    print_board(board)

    while True:
        row = int(input("Enter row (0, 1, 2) for your move: "))
        col = int(input("Enter column (0, 1, 2) for your move: "))

        if 0 <= row < 3 and 0 <= col < 3 and board[row][col] == EMPTY:
            board[row][col] = PLAYER_O
            print_board(board)

            if check_winner(board, PLAYER_O):
                print("You win!")
                break
            elif is_board_full(board):
                print("It's a draw!")
                break

            print("Computer's turn...")
            comp_row, comp_col = find_best_move(board)
            board[comp_row][comp_col] = PLAYER_X
            print_board(board)

            if check_winner(board, PLAYER_X):
                print("Computer wins!")
                break
            elif is_board_full(board):
                print("It's a draw!")
                break
        else:
            print("Invalid move. Try again.")

if __name__== "__main__":
    main()
